################################################
#ATACSeq snakemake Workflow
# Author: FARIS FATIMA
# HPC PROJECT
################################################


configfile: "scripts/config/config.yaml",

#subset_test
ech, num=glob_wildcards("data/subset/{samplename}_{number}.fastq.gz")

##### load rules ####
rule all:
     input:
        expand("results/fastqc_init/{sample}_fastqc.zip", sample = config["samples"]),
        expand("results/fastqc_init/{sample}_fastqc.html", sample = config["samples"]),
        expand("results/trim/{samplename}_1_trim_paired.fastq.gz", samplename=ech), 
        expand("results/trim/{samplename}_2_trim_paired.fastq.gz", samplename=ech),
        expand("results/fastqc_post/{sample}_1_trim_paired_fastqc.zip", sample =ech),
        expand("results/fastqc_post/{sample}_2_trim_paired_fastqc.html", sample=ech),
        expand("results/bowtie2/{samplename}.bam", samplename=ech),
        expand("results/picard/{samplename}_mapped_clean.bam", samplename=ech),
        expand("results/deeptools/PlotCoverage.pdf"),
        expand("results/deeptools/resultsMultiBamSummary.npz"),
        expand("results/deeptools/heatmap_SpearmanCorr_readCounts.png"),
        expand("results/macs2/{sample}_peaks.narrowPeak", sample =ech),
        expand("results/macs2/{sample}_summits.bed", sample =ech),
        expand("results/macs2/{sample}_model.r", sample =ech),
        expand("results/macs2/{sample}_peaks.xls", sample =ech)

rule unzip:
    input:
       "data/subset/{sample}.fastq.gz"
    output:
       temp("tmp/{sample}.fastq")
    shell:
       """
       mkdir -p tmp
       gunzip -c {input} > {output}
       """

rule fastqc_init:
    input:
        "tmp/{sample}.fastq"
    output:
        html="results/fastqc_init/{sample}_fastqc.html",
        zip="results/fastqc_init/{sample}_fastqc.zip"
    conda:
        "scripts/envs/qc.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/fastqc_init
        fastqc {input} -o "results/fastqc_init" -t {threads}
        """

rule trimming:
    input:
        r1="data/subset/{samplename}_1.fastq.gz",
        r2="data/subset/{samplename}_2.fastq.gz"
    output:
        fwd_P="results/trim/{samplename}_1_trim_paired.fastq.gz",
        rvr_P="results/trim/{samplename}_2_trim_paired.fastq.gz",
        fwd_U="results/trim/{samplename}_1_trim_unpaired.fastq.gz",
        rvr_U="results/trim/{samplename}_2_trim_unpaired.fastq.gz"
    conda:
        "scripts/envs/trim.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/trim
        trimmomatic PE -threads {threads} \
        -trimlog results/trim/trim.log -summary results/trim/stats \
        {input.r1} {input.r2} \
        {output.fwd_P} \
        {output.fwd_U} \
        {output.rvr_P} \
        {output.rvr_U} ILLUMINACLIP:data/NexteraPE-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:33
        """

rule fastqc_post:
    input:
        "results/trim/{sample}.fastq.gz"
    output:
        html="results/fastqc_post/{sample}_fastqc.html",
        zip="results/fastqc_post/{sample}_fastqc.zip"
    conda:
        "scripts/envs/qc.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/fastqc_post
        fastqc {input} -o "results/fastqc_post" -t {threads}
        """

rule bowtie2:
    input:
        r1="results/trim/{samplename}_1_trim_paired.fastq.gz",
        r2="results/trim/{samplename}_2_trim_paired.fastq.gz"
    output:
        aln="results/bowtie2/{samplename}.bam"
    conda:
       "scripts/envs/bowtie2.yaml"
    threads: 2
    shell:
        """
        bowtie2  --very-sensitive -p 1 -k 10  -x data/reference/bowtie2/all -1 {input.r1}  -2 {input.r2} | samtools view -q 2 -bS  -  |  samtools sort - -o {output.aln}
        samtools index -b {output.aln}
        """
rule picard:
    input:
        map="results/bowtie2/{samplename}.bam"        
    output:
        map_clean="results/picard/{samplename}_cleaned.bam",
        map_clean_txt="results/picard/{samplename}_cleaned.txt"
    conda:
      "scripts/envs/picard.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/picard
        picard MarkDuplicates \
        I={input.map} \
        O={output.map_clean} \
        M={output.map_clean_txt} \
        REMOVE_DUPLICATES=true
        samtools index -b {output.map_clean}
        """

rule deeptools:
    input:
        bam="results/picard/*.bam"
    output:
        plot_cov="results/deeptools/PlotCoverage.pdf",
        summary="results/deeptools/resultsMultiBamSummary.npz",
        plot_corr="results/deeptools/heatmap_SpearmanCorr_readCounts.png"        
    conda:
        "scripts/envs/deeptools.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/deeptools
        plotCoverage --bamfiles {input.bam} --plotFile {output.plot_cov} --smartLabels --plotFileFormat pdf -p 6
        multiBamSummary bins --bamfiles {input.bam} -o {output.summary} -p 6
        plotCorrelation -in {output.summary} --corMethod spearman --skipZeros --whatToPlot heatmap --colorMap RdYlBu --plotNumbers -o {output.plot_corr}
        """

rule macs2:
    input:
       "results/picard/{sample}_cleaned.bam"
    output:
       "results/macs2/{sample}_model.r", "results/macs2/{sample}_peaks.narrowPeak","results/macs2/{sample}_peaks.xls", "results/macs2/{sample}_summits.bed"
    conda:
        "scripts/envs/macs2.yaml"
    threads: 2
    shell:
        """
        mkdir -p results/macs2
        macs2 callpeak -t {input}  \
        -f BAM \
        -n {wildcards.sample} \
        --outdir results/macs2
        """
